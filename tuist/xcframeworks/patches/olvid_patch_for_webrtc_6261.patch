diff --git a/sdk/objc/components/capturer/RTCCameraVideoCapturer.h b/sdk/objc/components/capturer/RTCCameraVideoCapturer.h
index 370bfa70f0..c481b93f11 100644
--- a/sdk/objc/components/capturer/RTCCameraVideoCapturer.h
+++ b/sdk/objc/components/capturer/RTCCameraVideoCapturer.h
@@ -33,6 +33,8 @@ NS_EXTENSION_UNAVAILABLE_IOS("Camera not available in app extensions.")
 // Returns the most efficient supported output pixel format for this capturer.
 - (FourCharCode)preferredOutputPixelFormat;
 
+- (void)setRotationDependsOnDeviceOrientation:(BOOL)value;
+
 // Starts the capture session asynchronously and notifies callback on completion.
 // The device will capture video in the format given in the `format` parameter. If the pixel format
 // in `format` is supported by the WebRTC pipeline, the same pixel format will be used for the
diff --git a/sdk/objc/components/capturer/RTCCameraVideoCapturer.m b/sdk/objc/components/capturer/RTCCameraVideoCapturer.m
index e7c47b4e99..66bc64e3cd 100644
--- a/sdk/objc/components/capturer/RTCCameraVideoCapturer.m
+++ b/sdk/objc/components/capturer/RTCCameraVideoCapturer.m
@@ -41,6 +41,7 @@ const int64_t kNanosecondsPerSecond = 1000000000;
   FourCharCode _preferredOutputPixelFormat;
   FourCharCode _outputPixelFormat;
   RTCVideoRotation _rotation;
+  BOOL _rotationDependsOnDeviceOrientation;
 #if TARGET_OS_IPHONE
   UIDeviceOrientation _orientation;
   BOOL _generatingOrientationNotifications;
@@ -54,6 +55,10 @@ const int64_t kNanosecondsPerSecond = 1000000000;
 @synthesize isRunning = _isRunning;
 @synthesize willBeRunning = _willBeRunning;
 
+- (void)setRotationDependsOnDeviceOrientation:(BOOL)value {
+  _rotationDependsOnDeviceOrientation = value;
+}
+
 - (instancetype)init {
   return [self initWithDelegate:nil captureSession:[[AVCaptureSession alloc] init]];
 }
@@ -65,6 +70,7 @@ const int64_t kNanosecondsPerSecond = 1000000000;
 // This initializer is used for testing.
 - (instancetype)initWithDelegate:(__weak id<RTC_OBJC_TYPE(RTCVideoCapturerDelegate)>)delegate
                   captureSession:(AVCaptureSession *)captureSession {
+  _rotationDependsOnDeviceOrientation = YES;
   if (self = [super initWithDelegate:delegate]) {
     // Create the capture session and all relevant inputs and outputs. We need
     // to do this in init because the application may want the capture session
@@ -283,6 +289,11 @@ const int64_t kNanosecondsPerSecond = 1000000000;
   _rotation = RTCVideoRotation_0;
 #endif
 
+  // If the rotation should not depend on the orientation of the device, reset it.
+  if (!_rotationDependsOnDeviceOrientation) {
+    _rotation = RTCVideoRotation_0;
+  }
+
   RTC_OBJC_TYPE(RTCCVPixelBuffer) *rtcPixelBuffer =
       [[RTC_OBJC_TYPE(RTCCVPixelBuffer) alloc] initWithPixelBuffer:pixelBuffer];
   int64_t timeStampNs = CMTimeGetSeconds(CMSampleBufferGetPresentationTimeStamp(sampleBuffer)) *
