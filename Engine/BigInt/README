Step 1: Building GMP as a static library
----------------------------------------

The reason why compiling GMP is harder than most C libraries is that the build process does not only compiles C files
for the target architecture: it also requires to compile some C files that are then executed on the host to build
GMP. The make_static_gmp_lib.sh script (inspired from
https://stackoverflow.com/questions/27016612/compiling-external-c-library-for-use-with-ios-project) defines a specific
CC_FOR_BUILD environment for that purpose.

To build the universal static GMP library, update the GMP version in the file make_static_gmp_lib.sh and run the script.

The .a and .h can then be found in ./builds/gmp-<version>/universal/

To check the supported architectures:

$ lipo -info builds/gmp-6.1.2/universal/libgmp.a
Architectures in the fat file: builds/gmp-6.1.2/universal/libgmp.a are: armv7 armv7s i386 x86_64 arm64

Step 2: Create a framework embedding the static lib
---------------------------------------------------

UPDATE: We will probably not use a framework at all, since this library will certainly be included 'as is' in the crypto
lib. So this and the next one are not necessary.

We essentially used https://medium.com/@zaidkhanintel/develop-a-swift-framework-1c7fdda27bf1 to create the Xcode
 SwiftGMP project allowing to build the SwiftGMP framework.

1. Create/Update the Dependencies/gmp/ directory with the .a and .h files created in Step 1.

2. Make sure libgmp.a is referenced in the "Linked Frameworks and Libraries" section of the SwiftGMP project. Also make
sure that the "Import Paths" of the "Swift Compiler - Search Paths" section of the "Build Settings" tab contain

${SRCROOT}/gmp

for both Debug and Release.

The new Target should already be create and the 'run script' has already been included in the build settings. Building the UniversalSwiftGMP target should open a Finder showing the framework.

Step 3: Use the framework
-------------------------

Have a look at SwiftGMPQuickTest.